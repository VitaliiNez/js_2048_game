{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js"],"sourcesContent":["(function () {\n/* eslint-disable no-useless-return */ function $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$e6256bf45c68d561(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$2fd15edff6687200(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$60dbc22abd7da546() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $efec029548ccee7f$export$fdf2a89c76341bbf(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$e6256bf45c68d561)(arr) || (0, $8ca2848f896a6803$export$2fd15edff6687200)(arr, i) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr, i) || (0, $a0bc1859061deae1$export$60dbc22abd7da546)();\n}\n\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = this.initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n        });\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                if (this.getStatus() !== \"playing\") return;\n                var updatedState = this.state.map(function(row) {\n                    return _this.move(row);\n                });\n                if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n                    this.updateGameState(updatedState);\n                    this.addCells();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (this.getStatus() !== \"playing\") return;\n                var reverseState = this.state.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row).reverse();\n                });\n                var updatedState = reverseState.map(function(row) {\n                    return _this.move(row).reverse();\n                });\n                if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n                    this.updateGameState(updatedState);\n                    this.addCells();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                if (this.getStatus() !== \"playing\") return;\n                var rotateState = this.rotateMatrixCounterClockwise(this.getState());\n                var updatedState = rotateState.map(function(row) {\n                    return _this.move(row);\n                });\n                var unRotateState = this.rotateMatrixClockwise(updatedState);\n                if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n                    this.updateGameState(unRotateState);\n                    this.addCells();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                if (this.getStatus() !== \"playing\") return;\n                var rotateState = this.rotateMatrixClockwise(this.getState());\n                var updatedState = rotateState.map(function(row) {\n                    return _this.move(row);\n                });\n                var unRotateState = this.rotateMatrixCounterClockwise(updatedState);\n                if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n                    this.updateGameState(unRotateState);\n                    this.addCells();\n                }\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(row) {\n                var newRow = [];\n                var i = 0;\n                while(i < row.length){\n                    var current = row[i];\n                    if (current) {\n                        var left = false;\n                        for(var j = i + 1; j < row.length; j++){\n                            var next = row[j];\n                            if (next === current) {\n                                newRow.push(current * 2);\n                                this.updateGameScore(current * 2);\n                                left = true;\n                                i = j + 1;\n                                break;\n                            } else if (next) {\n                                newRow.push(current);\n                                left = true;\n                                i = j;\n                                break;\n                            }\n                        }\n                        if (!left) {\n                            newRow.push(current);\n                            i++;\n                        }\n                    } else i++;\n                }\n                while(newRow.length < row.length)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"rotateMatrixClockwise\",\n            value: function rotateMatrixClockwise(matrix) {\n                var n = matrix.length;\n                var rotatedMatrix = [];\n                for(var i = 0; i < n; i++){\n                    rotatedMatrix.push([]);\n                    for(var j = 0; j < n; j++)rotatedMatrix[i].unshift(matrix[j][i]);\n                }\n                return rotatedMatrix;\n            }\n        },\n        {\n            key: \"rotateMatrixCounterClockwise\",\n            value: function rotateMatrixCounterClockwise(matrix) {\n                var n = matrix.length;\n                var rotatedMatrix = [];\n                for(var i = 0; i < n; i++)rotatedMatrix.push([]);\n                for(var i1 = 0; i1 < n; i1++)for(var j = 0; j < n; j++)rotatedMatrix[n - j - 1].push(matrix[i1][j]);\n                return rotatedMatrix;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addCells(2);\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.resetState();\n            }\n        },\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                return this.state.flatMap(function(row, rowIndex) {\n                    return row.map(function(cell, colIndex) {\n                        return cell === 0 ? [\n                            rowIndex,\n                            colIndex\n                        ] : null;\n                    });\n                }).filter(function(cell) {\n                    return cell !== null;\n                });\n            }\n        },\n        {\n            key: \"createNewTile\",\n            value: function createNewTile() {\n                var emptyCells = this.getEmptyCells();\n                if (!emptyCells.length) return;\n                var _emptyCells_Math_trunc = (0, $efec029548ccee7f$export$fdf2a89c76341bbf)(emptyCells[Math.trunc(Math.random() * emptyCells.length)], 2), row = _emptyCells_Math_trunc[0], col = _emptyCells_Math_trunc[1];\n                this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"addCells\",\n            value: function addCells() {\n                var count = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n                for(var i = 0; i < count; i++)this.createNewTile();\n                var state = this.getState();\n                if (this.isWin(state)) this.status = \"win\";\n                else if (!this.isStateValid(state)) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"resetState\",\n            value: function resetState() {\n                this.state = this.initialState.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                this.score = 0;\n            }\n        },\n        {\n            key: \"isStateValid\",\n            value: function isStateValid(currentState) {\n                if (this.status !== \"playing\") return false;\n                for(var row = 0; row < currentState.length; row++)for(var col = 0; col < currentState[row].length; col++){\n                    if (col < currentState[row].length - 1 && currentState[row][col] === currentState[row][col + 1]) return true;\n                    if (row < currentState.length - 1 && currentState[row][col] === currentState[row + 1][col]) return true;\n                    if (!currentState[row][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"updateGameState\",\n            value: function updateGameState(state) {\n                this.state = state;\n            }\n        },\n        {\n            key: \"updateGameScore\",\n            value: function updateGameScore(addScore) {\n                this.score += addScore;\n            }\n        },\n        {\n            key: \"isWin\",\n            value: function isWin(state) {\n                return state.flat().some(function(tile) {\n                    return tile === 2048;\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$filedRows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(document.querySelectorAll(\".field-row\"));\nvar $197cd56b15c33885$var$fieldCells = $197cd56b15c33885$var$filedRows.map(function(row) {\n    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children);\n});\nvar $197cd56b15c33885$var$messages = {\n    idle: document.querySelector(\".message-start\"),\n    lose: document.querySelector(\".message-lose\"),\n    win: document.querySelector(\".message-win\")\n};\nvar $197cd56b15c33885$var$fillGameField = function(state) {\n    state.forEach(function(row, i) {\n        row.forEach(function(cell, j) {\n            var currentCell = $197cd56b15c33885$var$fieldCells[i][j];\n            currentCell.className = !cell ? \"field-cell\" : \"field-cell field-cell--\".concat(cell);\n            currentCell.textContent = cell || \"\";\n        });\n    });\n};\nvar $197cd56b15c33885$var$showMessage = function() {\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    for(var key in $197cd56b15c33885$var$messages){\n        var message = $197cd56b15c33885$var$messages[key];\n        message.classList.toggle(\"hidden\", key !== gameStatus);\n    }\n};\nvar $197cd56b15c33885$var$updateScore = function(score) {\n    $197cd56b15c33885$var$gameScore.textContent = score;\n};\n$197cd56b15c33885$var$button.addEventListener(\"click\", function(e) {\n    var buttonText = e.target.textContent;\n    if (buttonText === \"Start\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$button.textContent = \"Restart\";\n        $197cd56b15c33885$var$button.classList.remove(\"start\");\n        $197cd56b15c33885$var$button.classList.add(\"restart\");\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$updateScore(0);\n        $197cd56b15c33885$var$button.textContent = \"Start\";\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n    }\n    var state = $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$fillGameField(state);\n    $197cd56b15c33885$var$showMessage();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    e.preventDefault();\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    var moveActions = {\n        ArrowUp: $197cd56b15c33885$var$game.moveUp,\n        ArrowDown: $197cd56b15c33885$var$game.moveDown,\n        ArrowLeft: $197cd56b15c33885$var$game.moveLeft,\n        ArrowRight: $197cd56b15c33885$var$game.moveRight\n    };\n    var action = moveActions[e.key];\n    if (action) action.call($197cd56b15c33885$var$game);\n    $197cd56b15c33885$var$fillGameField($197cd56b15c33885$var$game.getState());\n    $197cd56b15c33885$var$updateScore($197cd56b15c33885$var$game.getScore());\n    $197cd56b15c33885$var$showMessage();\n});\n\n})();\n//# sourceMappingURL=index.f83a4839.js.map\n","/* eslint-disable no-useless-return */\n'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\n\nconst filedRows = [...document.querySelectorAll('.field-row')];\nconst fieldCells = filedRows.map((row) => [...row.children]);\n\nconst messages = {\n  idle: document.querySelector('.message-start'),\n  lose: document.querySelector('.message-lose'),\n  win: document.querySelector('.message-win'),\n};\n\nconst fillGameField = (state) => {\n  state.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const currentCell = fieldCells[i][j];\n\n      currentCell.className = !cell\n        ? 'field-cell'\n        : `field-cell field-cell--${cell}`;\n      currentCell.textContent = cell || '';\n    });\n  });\n};\n\nconst showMessage = () => {\n  const gameStatus = game.getStatus();\n\n  for (const key in messages) {\n    const message = messages[key];\n\n    message.classList.toggle('hidden', key !== gameStatus);\n  }\n};\n\nconst updateScore = (score) => {\n  gameScore.textContent = score;\n};\n\nbutton.addEventListener('click', (e) => {\n  const buttonText = e.target.textContent;\n\n  if (buttonText === 'Start') {\n    game.start();\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n  } else {\n    game.restart();\n    updateScore(0);\n    button.textContent = 'Start';\n    button.classList.remove('restart');\n    button.classList.add('start');\n  }\n\n  const state = game.getState();\n\n  fillGameField(state);\n  showMessage();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const moveActions = {\n    ArrowUp: game.moveUp,\n    ArrowDown: game.moveDown,\n    ArrowLeft: game.moveLeft,\n    ArrowRight: game.moveRight,\n  };\n\n  const action = moveActions[e.key];\n\n  if (action) {\n    action.call(game);\n  }\n\n  fillGameField(game.getState());\n  updateScore(game.getScore());\n  showMessage();\n});\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\nclass Game {\n  constructor() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n  moveLeft() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const updatedState = this.state.map((row) => this.move(row));\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n      this.updateGameState(updatedState);\n      this.addCells();\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const reverseState = this.state.map((row) => [...row].reverse());\n\n    const updatedState = reverseState.map((row) => {\n      return this.move(row).reverse();\n    });\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n      this.updateGameState(updatedState);\n      this.addCells();\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const rotateState = this.rotateMatrixCounterClockwise(this.getState());\n\n    const updatedState = rotateState.map((row) => this.move(row));\n\n    const unRotateState = this.rotateMatrixClockwise(updatedState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n      this.updateGameState(unRotateState);\n      this.addCells();\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const rotateState = this.rotateMatrixClockwise(this.getState());\n\n    const updatedState = rotateState.map((row) => this.move(row));\n\n    const unRotateState = this.rotateMatrixCounterClockwise(updatedState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n      this.updateGameState(unRotateState);\n      this.addCells();\n    }\n  }\n\n  move(row) {\n    const newRow = [];\n    let i = 0;\n\n    while (i < row.length) {\n      const current = row[i];\n\n      if (current) {\n        let left = false;\n\n        for (let j = i + 1; j < row.length; j++) {\n          const next = row[j];\n\n          if (next === current) {\n            newRow.push(current * 2);\n            this.updateGameScore(current * 2);\n            left = true;\n            i = j + 1;\n            break;\n          } else if (next) {\n            newRow.push(current);\n            left = true;\n            i = j;\n            break;\n          }\n        }\n\n        if (!left) {\n          newRow.push(current);\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    while (newRow.length < row.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n  rotateMatrixClockwise(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.push([]);\n\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[i].unshift(matrix[j][i]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  rotateMatrixCounterClockwise(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.push([]);\n    }\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[n - j - 1].push(matrix[i][j]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addCells(2);\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.resetState();\n  }\n\n  getEmptyCells() {\n    return this.state\n      .flatMap((row, rowIndex) => {\n        return row.map((cell, colIndex) => {\n          return cell === 0 ? [rowIndex, colIndex] : null;\n        });\n      })\n      .filter((cell) => cell !== null);\n  }\n\n  createNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (!emptyCells.length) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.trunc(Math.random() * emptyCells.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  addCells(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.createNewTile();\n    }\n\n    const state = this.getState();\n\n    if (this.isWin(state)) {\n      this.status = 'win';\n    } else if (!this.isStateValid(state)) {\n      this.status = 'lose';\n    }\n  }\n\n  resetState() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  isStateValid(currentState) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    for (let row = 0; row < currentState.length; row++) {\n      for (let col = 0; col < currentState[row].length; col++) {\n        if (\n          col < currentState[row].length - 1 &&\n          currentState[row][col] === currentState[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < currentState.length - 1 &&\n          currentState[row][col] === currentState[row + 1][col]\n        ) {\n          return true;\n        }\n\n        if (!currentState[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateGameState(state) {\n    this.state = state;\n  }\n\n  updateGameScore(addScore) {\n    this.score += addScore;\n  }\n\n  isWin(state) {\n    return state.flat().some((tile) => tile === 2048);\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_with_holes } from \"./_array_with_holes.js\";\nimport { _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","export function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","export function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","export function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$a5be06335b3a083c","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","TypeError","$197cd56b15c33885$var$game","protoProps","Game","instance","Constructor","initialState","state","map","row","status","score","key","value","_this","getStatus","updatedState","move","JSON","stringify","getState","updateGameState","addCells","reverseState","reverse","rotateState","rotateMatrixCounterClockwise","unRotateState","rotateMatrixClockwise","newRow","current","left","j","next","push","updateGameScore","matrix","rotatedMatrix","unshift","i1","resetState","flatMap","rowIndex","cell","colIndex","filter","emptyCells","getEmptyCells","_emptyCells_Math_trunc","Math","trunc","random","_s","_e","_i","_arr","_n","_d","done","err","col","count","arguments","createNewTile","isWin","isStateValid","currentState","addScore","flat","some","tile","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$button","document","querySelector","$197cd56b15c33885$var$gameScore","$197cd56b15c33885$var$fieldCells","$197cd56b15c33885$var$filedRows","querySelectorAll","children","$197cd56b15c33885$var$messages","idle","lose","win","$197cd56b15c33885$var$fillGameField","forEach","currentCell","className","concat","textContent","$197cd56b15c33885$var$showMessage","gameStatus","message","classList","toggle","$197cd56b15c33885$var$updateScore","addEventListener","e","buttonText","start","remove","add","restart","preventDefault","action","moveActions","ArrowUp","moveUp","ArrowDown","moveDown","ArrowLeft","moveLeft","ArrowRight","moveRight","getScore"],"version":3,"file":"index.f83a4839.js.map"}
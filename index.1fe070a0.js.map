{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["/* eslint-disable no-useless-return */ \"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(){\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() !== \"playing\") return;\n        const updatedState = this.state.map((row)=>this.move(row));\n        if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n            this.updateGameState(updatedState);\n            this.addCells();\n        }\n    }\n    moveRight() {\n        if (this.getStatus() !== \"playing\") return;\n        const reverseState = this.state.map((row)=>[\n                ...row\n            ].reverse());\n        const updatedState = reverseState.map((row)=>{\n            return this.move(row).reverse();\n        });\n        if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n            this.updateGameState(updatedState);\n            this.addCells();\n        }\n    }\n    moveUp() {\n        if (this.getStatus() !== \"playing\") return;\n        const rotateState = this.rotateMatrixCounterClockwise(this.getState());\n        const updatedState = rotateState.map((row)=>this.move(row));\n        const unRotateState = this.rotateMatrixClockwise(updatedState);\n        if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n            this.updateGameState(unRotateState);\n            this.addCells();\n        }\n    }\n    moveDown() {\n        if (this.getStatus() !== \"playing\") return;\n        const rotateState = this.rotateMatrixClockwise(this.getState());\n        const updatedState = rotateState.map((row)=>this.move(row));\n        const unRotateState = this.rotateMatrixCounterClockwise(updatedState);\n        if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n            this.updateGameState(unRotateState);\n            this.addCells();\n        }\n    }\n    move(row) {\n        const newRow = [];\n        let i = 0;\n        while(i < row.length){\n            const current = row[i];\n            if (current) {\n                let left = false;\n                for(let j = i + 1; j < row.length; j++){\n                    const next = row[j];\n                    if (next === current) {\n                        newRow.push(current * 2);\n                        this.updateGameScore(current * 2);\n                        left = true;\n                        i = j + 1;\n                        break;\n                    } else if (next) {\n                        newRow.push(current);\n                        left = true;\n                        i = j;\n                        break;\n                    }\n                }\n                if (!left) {\n                    newRow.push(current);\n                    i++;\n                }\n            } else i++;\n        }\n        while(newRow.length < row.length)newRow.push(0);\n        return newRow;\n    }\n    rotateMatrixClockwise(matrix) {\n        const n = matrix.length;\n        const rotatedMatrix = [];\n        for(let i = 0; i < n; i++){\n            rotatedMatrix.push([]);\n            for(let j = 0; j < n; j++)rotatedMatrix[i].unshift(matrix[j][i]);\n        }\n        return rotatedMatrix;\n    }\n    rotateMatrixCounterClockwise(matrix) {\n        const n = matrix.length;\n        const rotatedMatrix = [];\n        for(let i = 0; i < n; i++)rotatedMatrix.push([]);\n        for(let i = 0; i < n; i++)for(let j = 0; j < n; j++)rotatedMatrix[n - j - 1].push(matrix[i][j]);\n        return rotatedMatrix;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addCells(2);\n    }\n    restart() {\n        this.status = \"idle\";\n        this.resetState();\n    }\n    getEmptyCells() {\n        return this.state.flatMap((row, rowIndex)=>{\n            return row.map((cell, colIndex)=>{\n                return cell === 0 ? [\n                    rowIndex,\n                    colIndex\n                ] : null;\n            });\n        }).filter((cell)=>cell !== null);\n    }\n    createNewTile() {\n        const emptyCells = this.getEmptyCells();\n        if (!emptyCells.length) return;\n        const [row, col] = emptyCells[Math.trunc(Math.random() * emptyCells.length)];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    addCells(count = 1) {\n        for(let i = 0; i < count; i++)this.createNewTile();\n        const state = this.getState();\n        if (this.isWin(state)) this.status = \"win\";\n        else if (!this.isStateValid(state)) this.status = \"lose\";\n    }\n    resetState() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    isStateValid(currentState) {\n        if (this.status !== \"playing\") return false;\n        for(let row = 0; row < currentState.length; row++)for(let col = 0; col < currentState[row].length; col++){\n            if (col < currentState[row].length - 1 && currentState[row][col] === currentState[row][col + 1]) return true;\n            if (row < currentState.length - 1 && currentState[row][col] === currentState[row + 1][col]) return true;\n            if (!currentState[row][col]) return true;\n        }\n        return false;\n    }\n    updateGameState(state) {\n        this.state = state;\n    }\n    updateGameScore(addScore) {\n        this.score += addScore;\n    }\n    isWin(state) {\n        return state.flat().some((tile)=>tile === 2048);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$filedRows = [\n    ...document.querySelectorAll(\".field-row\")\n];\nconst $09e991522ca7e64e$var$fieldCells = $09e991522ca7e64e$var$filedRows.map((row)=>[\n        ...row.children\n    ]);\nconst $09e991522ca7e64e$var$messages = {\n    idle: document.querySelector(\".message-start\"),\n    lose: document.querySelector(\".message-lose\"),\n    win: document.querySelector(\".message-win\")\n};\nconst $09e991522ca7e64e$var$fillGameField = (state)=>{\n    state.forEach((row, i)=>{\n        row.forEach((cell, j)=>{\n            const currentCell = $09e991522ca7e64e$var$fieldCells[i][j];\n            currentCell.className = !cell ? \"field-cell\" : `field-cell field-cell--${cell}`;\n            currentCell.textContent = cell || \"\";\n        });\n    });\n};\nconst $09e991522ca7e64e$var$showMessage = ()=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    for(const key in $09e991522ca7e64e$var$messages){\n        const message = $09e991522ca7e64e$var$messages[key];\n        message.classList.toggle(\"hidden\", key !== gameStatus);\n    }\n};\nconst $09e991522ca7e64e$var$updateScore = (score)=>{\n    $09e991522ca7e64e$var$gameScore.textContent = score;\n};\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (e)=>{\n    const buttonText = e.target.textContent;\n    if (buttonText === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateScore(0);\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n    }\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$fillGameField(state);\n    $09e991522ca7e64e$var$showMessage();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const moveActions = {\n        ArrowUp: $09e991522ca7e64e$var$game.moveUp,\n        ArrowDown: $09e991522ca7e64e$var$game.moveDown,\n        ArrowLeft: $09e991522ca7e64e$var$game.moveLeft,\n        ArrowRight: $09e991522ca7e64e$var$game.moveRight\n    };\n    const action = moveActions[e.key];\n    if (action) action.call($09e991522ca7e64e$var$game);\n    $09e991522ca7e64e$var$fillGameField($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$showMessage();\n});\n\n\n//# sourceMappingURL=index.1fe070a0.js.map\n","/* eslint-disable no-useless-return */\n'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\n\nconst filedRows = [...document.querySelectorAll('.field-row')];\nconst fieldCells = filedRows.map((row) => [...row.children]);\n\nconst messages = {\n  idle: document.querySelector('.message-start'),\n  lose: document.querySelector('.message-lose'),\n  win: document.querySelector('.message-win'),\n};\n\nconst fillGameField = (state) => {\n  state.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const currentCell = fieldCells[i][j];\n\n      currentCell.className = !cell\n        ? 'field-cell'\n        : `field-cell field-cell--${cell}`;\n      currentCell.textContent = cell || '';\n    });\n  });\n};\n\nconst showMessage = () => {\n  const gameStatus = game.getStatus();\n\n  for (const key in messages) {\n    const message = messages[key];\n\n    message.classList.toggle('hidden', key !== gameStatus);\n  }\n};\n\nconst updateScore = (score) => {\n  gameScore.textContent = score;\n};\n\nbutton.addEventListener('click', (e) => {\n  const buttonText = e.target.textContent;\n\n  if (buttonText === 'Start') {\n    game.start();\n    button.textContent = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n  } else {\n    game.restart();\n    updateScore(0);\n    button.textContent = 'Start';\n    button.classList.remove('restart');\n    button.classList.add('start');\n  }\n\n  const state = game.getState();\n\n  fillGameField(state);\n  showMessage();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const moveActions = {\n    ArrowUp: game.moveUp,\n    ArrowDown: game.moveDown,\n    ArrowLeft: game.moveLeft,\n    ArrowRight: game.moveRight,\n  };\n\n  const action = moveActions[e.key];\n\n  if (action) {\n    action.call(game);\n  }\n\n  fillGameField(game.getState());\n  updateScore(game.getScore());\n  showMessage();\n});\n","'use strict';\n\nclass Game {\n  constructor() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n  moveLeft() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const updatedState = this.state.map((row) => this.move(row));\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n      this.updateGameState(updatedState);\n      this.addCells();\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const reverseState = this.state.map((row) => [...row].reverse());\n\n    const updatedState = reverseState.map((row) => {\n      return this.move(row).reverse();\n    });\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n      this.updateGameState(updatedState);\n      this.addCells();\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const rotateState = this.rotateMatrixCounterClockwise(this.getState());\n\n    const updatedState = rotateState.map((row) => this.move(row));\n\n    const unRotateState = this.rotateMatrixClockwise(updatedState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n      this.updateGameState(unRotateState);\n      this.addCells();\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    const rotateState = this.rotateMatrixClockwise(this.getState());\n\n    const updatedState = rotateState.map((row) => this.move(row));\n\n    const unRotateState = this.rotateMatrixCounterClockwise(updatedState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateState)) {\n      this.updateGameState(unRotateState);\n      this.addCells();\n    }\n  }\n\n  move(row) {\n    const newRow = [];\n    let i = 0;\n\n    while (i < row.length) {\n      const current = row[i];\n\n      if (current) {\n        let left = false;\n\n        for (let j = i + 1; j < row.length; j++) {\n          const next = row[j];\n\n          if (next === current) {\n            newRow.push(current * 2);\n            this.updateGameScore(current * 2);\n            left = true;\n            i = j + 1;\n            break;\n          } else if (next) {\n            newRow.push(current);\n            left = true;\n            i = j;\n            break;\n          }\n        }\n\n        if (!left) {\n          newRow.push(current);\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    while (newRow.length < row.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n  rotateMatrixClockwise(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.push([]);\n\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[i].unshift(matrix[j][i]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  rotateMatrixCounterClockwise(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.push([]);\n    }\n\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[n - j - 1].push(matrix[i][j]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addCells(2);\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.resetState();\n  }\n\n  getEmptyCells() {\n    return this.state\n      .flatMap((row, rowIndex) => {\n        return row.map((cell, colIndex) => {\n          return cell === 0 ? [rowIndex, colIndex] : null;\n        });\n      })\n      .filter((cell) => cell !== null);\n  }\n\n  createNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (!emptyCells.length) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.trunc(Math.random() * emptyCells.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  addCells(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.createNewTile();\n    }\n\n    const state = this.getState();\n\n    if (this.isWin(state)) {\n      this.status = 'win';\n    } else if (!this.isStateValid(state)) {\n      this.status = 'lose';\n    }\n  }\n\n  resetState() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  isStateValid(currentState) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    for (let row = 0; row < currentState.length; row++) {\n      for (let col = 0; col < currentState[row].length; col++) {\n        if (\n          col < currentState[row].length - 1 &&\n          currentState[row][col] === currentState[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < currentState.length - 1 &&\n          currentState[row][col] === currentState[row + 1][col]\n        ) {\n          return true;\n        }\n\n        if (!currentState[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateGameState(state) {\n    this.state = state;\n  }\n\n  updateGameScore(addScore) {\n    this.score += addScore;\n  }\n\n  isWin(state) {\n    return state.flat().some((tile) => tile === 2048);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","status","score","moveLeft","getStatus","updatedState","move","JSON","stringify","getState","updateGameState","addCells","moveRight","reverseState","reverse","moveUp","rotateState","rotateMatrixCounterClockwise","unRotateState","rotateMatrixClockwise","moveDown","newRow","i","length","current","left","j","next","push","updateGameScore","matrix","n","rotatedMatrix","unshift","getScore","start","restart","resetState","getEmptyCells","flatMap","rowIndex","cell","colIndex","filter","createNewTile","emptyCells","col","Math","trunc","random","count","isWin","isStateValid","currentState","addScore","flat","some","tile","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$fieldCells","$09e991522ca7e64e$var$filedRows","querySelectorAll","children","$09e991522ca7e64e$var$messages","idle","lose","win","$09e991522ca7e64e$var$fillGameField","forEach","currentCell","className","textContent","$09e991522ca7e64e$var$showMessage","gameStatus","key","message","classList","toggle","$09e991522ca7e64e$var$updateScore","addEventListener","e","buttonText","target","remove","add","preventDefault","action","moveActions","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","call"],"version":3,"file":"index.1fe070a0.js.map"}